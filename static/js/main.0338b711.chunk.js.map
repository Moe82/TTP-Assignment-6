{"version":3,"sources":["DisplayCity.jsx","Zip.jsx","App.js","reportWebVitals.js","index.js"],"names":["DisplayCity","id","this","props","city","state","lat","long","population","wages","country","region","Component","Zip","handleChange","event","value","target","setState","zip","data","url","fetch","response","json","console","log","name","type","placeholder","onChange","e","map","item","City","State","Lat","Long","EstimatedPopulation","TotalWages","Country","WorldRegion","RecordNumber","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sTAsBeA,G,6KAhBP,OACI,sBAAKC,GAAK,aAAV,UACI,6BAAKC,KAAKC,MAAMC,KAAO,KAAOF,KAAKC,MAAME,QACzC,+BACI,yCAAYH,KAAKC,MAAME,SACvB,4CAAe,IAAMH,KAAKC,MAAMG,IAAM,IAAMJ,KAAKC,MAAMI,KAAO,OAC9D,0DAA6BL,KAAKC,MAAMK,cACxC,+CAAkBN,KAAKC,MAAMM,SAC7B,2CAAcP,KAAKC,MAAMO,WACzB,gDAAmBR,KAAKC,MAAMQ,oB,GAXxBC,cCkDXC,G,wDA/CX,WAAYV,GAAQ,IAAD,8BACf,cAAMA,IAQVW,aAAe,SAAAC,GACX,IAAMC,EAAQD,EAAME,OAAOD,MAC3B,EAAKE,SAAS,CACVC,IAAKH,KATT,EAAKX,MAAQ,CACTc,IAAK,GACLC,KAAM,IALK,E,4LAgBXC,EAAM,wCAA0CnB,KAAKG,MAAMc,I,SAC1CG,MAAMD,G,cAAvBE,E,gBACeA,EAASC,O,OAAtBJ,E,OACNK,QAAQC,IAAIN,GACZlB,KAAKgB,SAAS,CACVE,KAAMA,I,qIAGJ,IAAD,OACL,OACI,sBAAKnB,GAAG,YAAR,UACI,qBAAKA,GAAG,SAAR,SACI,wBAAOA,GAAG,WAAV,sBAEI,uBAAOA,GAAG,MAAM0B,KAAK,MAAMC,KAAK,OAAOC,YAAY,aAAaC,SAAU,SAAAC,GAAC,OAAI,EAAKjB,aAAaiB,WAIrG7B,KAAKG,MAAMe,KAAKY,KAAI,SAACC,GACjB,OACI,cAAC,EAAD,CAAqC7B,KAAM6B,EAAKC,KAAM7B,MAAO4B,EAAKE,MAAO7B,IAAK2B,EAAKG,IAAK7B,KAAM0B,EAAKI,KAAM7B,WAAcyB,EAAKK,oBAC5H7B,MAASwB,EAAKM,WAAY7B,QAAWuB,EAAKO,QAAS7B,OAAUsB,EAAKQ,aADhDR,EAAKS,wB,GAtCjC9B,cCOH+B,MATf,WACE,OACE,sBAAKC,UAAU,MAAf,UACE,qDACA,cAAC,EAAD,QCKSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.0338b711.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nimport \"./DisplayCity.css\"\n\nclass DisplayCity extends Component {\n    render() {\n        return (\n            <div id = \"city-cards\">\n                <h4>{this.props.city + \", \" + this.props.state}</h4>\n                <ul>\n                    <li>State: {this.props.state}</li>\n                    <li>Location: {\"(\" + this.props.lat + \",\" + this.props.long + \")\"}</li>\n                    <li>Population (Estimated): {this.props.population}</li>\n                    <li>Total Wages: {this.props.wages}</li>\n                    <li>Country: {this.props.country}</li>\n                    <li>World Region: {this.props.region}</li>\n                </ul>\n            </div>\n        )\n    }\n}\n\nexport default DisplayCity;","import React, { Component } from \"react\";\n\nimport DisplayCity from \"./DisplayCity\";\nimport \"./Zip.css\"\n\nclass Zip extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            zip: '',\n            data: []\n        }\n    }\n\n    handleChange = event => {\n        const value = event.target.value;\n        this.setState({\n            zip: value\n        })\n    }\n    async componentDidUpdate() {\n        let url = \"http://ctp-zip-api.herokuapp.com/zip/\" + this.state.zip;\n        let response = await fetch(url);\n        const data = await response.json();\n        console.log(data)\n        this.setState({\n            data: data\n        })\n    }\n    render() {\n        return (\n            <div id=\"container\">\n                <div id=\"search\">\n                    <label id=\"zip-code\">\n                        Zip-Code:\n                        <input id=\"zip\" name=\"zip\" type=\"text\" placeholder=\"e.g. 10016\" onChange={e => this.handleChange(e)} />\n                    </label>\n                </div>\n                {\n                    this.state.data.map((item) => {\n                        return (\n                            <DisplayCity key={item.RecordNumber} city={item.City} state={item.State} lat={item.Lat} long={item.Long} population = {item.EstimatedPopulation} \n                            wages = {item.TotalWages} country = {item.Country} region = {item.WorldRegion}/>\n                        )\n                    })\n                }\n            </div>\n\n        )\n    }\n}\n\nexport default Zip;","import './App.css';\nimport Zip from './Zip';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header>Zip-Code Search</header>\n      <Zip />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}